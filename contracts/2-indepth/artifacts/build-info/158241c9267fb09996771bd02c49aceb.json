{
	"id": "158241c9267fb09996771bd02c49aceb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/2-indepth/7-etherunits.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.7.0 < 0.9.0;\n\ncontract learnEtherUnits{\n    function test() public pure{\n        // wei is the smallest denomination of ether\n        assert(1000000000000000000 wei == 1 ether);\n        assert(1 wei == 1);\n        assert(1 ether == 1e18);\n        // 1 ether == 1e18\n        // create an assertion for 2 eths to be equivalent to weis\n        assert(2.5 ether == 2500000000000000000);\n    }\n\n    function exercise() public pure{\n        assert(60 seconds == 1 minutes);\n        assert(60 minutes == 1 hours);\n        assert(24 hours == 1 days);\n        assert(7 days == 1 weeks);\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/2-indepth/7-etherunits.sol": {
				"learnEtherUnits": {
					"abi": [
						{
							"inputs": [],
							"name": "exercise",
							"outputs": [],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "test",
							"outputs": [],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/2-indepth/7-etherunits.sol\":68:639  contract learnEtherUnits{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/2-indepth/7-etherunits.sol\":68:639  contract learnEtherUnits{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xd32cb0fe\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xf8a8fd6d\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/2-indepth/7-etherunits.sol\":448:637  function exercise() public pure{... */\n    tag_3:\n      tag_5\n      tag_6\n      jump\t// in\n    tag_5:\n      stop\n        /* \"contracts/2-indepth/7-etherunits.sol\":98:442  function test() public pure{... */\n    tag_4:\n      tag_7\n      tag_8\n      jump\t// in\n    tag_7:\n      stop\n        /* \"contracts/2-indepth/7-etherunits.sol\":448:637  function exercise() public pure{... */\n    tag_6:\n        /* \"contracts/2-indepth/7-etherunits.sol\":510:519  1 minutes */\n      0x3c\n        /* \"contracts/2-indepth/7-etherunits.sol\":496:506  60 seconds */\n      dup1\n        /* \"contracts/2-indepth/7-etherunits.sol\":496:519  60 seconds == 1 minutes */\n      eq\n        /* \"contracts/2-indepth/7-etherunits.sol\":489:520  assert(60 seconds == 1 minutes) */\n      tag_10\n      jumpi\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n    tag_10:\n        /* \"contracts/2-indepth/7-etherunits.sol\":551:558  1 hours */\n      0x0e10\n        /* \"contracts/2-indepth/7-etherunits.sol\":537:547  60 minutes */\n      dup1\n        /* \"contracts/2-indepth/7-etherunits.sol\":537:558  60 minutes == 1 hours */\n      eq\n        /* \"contracts/2-indepth/7-etherunits.sol\":530:559  assert(60 minutes == 1 hours) */\n      tag_13\n      jumpi\n      tag_14\n      tag_12\n      jump\t// in\n    tag_14:\n    tag_13:\n        /* \"contracts/2-indepth/7-etherunits.sol\":588:594  1 days */\n      0x015180\n        /* \"contracts/2-indepth/7-etherunits.sol\":576:584  24 hours */\n      dup1\n        /* \"contracts/2-indepth/7-etherunits.sol\":576:594  24 hours == 1 days */\n      eq\n        /* \"contracts/2-indepth/7-etherunits.sol\":569:595  assert(24 hours == 1 days) */\n      tag_15\n      jumpi\n      tag_16\n      tag_12\n      jump\t// in\n    tag_16:\n    tag_15:\n        /* \"contracts/2-indepth/7-etherunits.sol\":622:629  1 weeks */\n      0x093a80\n        /* \"contracts/2-indepth/7-etherunits.sol\":612:618  7 days */\n      dup1\n        /* \"contracts/2-indepth/7-etherunits.sol\":612:629  7 days == 1 weeks */\n      eq\n        /* \"contracts/2-indepth/7-etherunits.sol\":605:630  assert(7 days == 1 weeks) */\n      tag_17\n      jumpi\n      tag_18\n      tag_12\n      jump\t// in\n    tag_18:\n    tag_17:\n        /* \"contracts/2-indepth/7-etherunits.sol\":448:637  function exercise() public pure{... */\n      jump\t// out\n        /* \"contracts/2-indepth/7-etherunits.sol\":98:442  function test() public pure{... */\n    tag_8:\n        /* \"contracts/2-indepth/7-etherunits.sol\":222:229  1 ether */\n      0x0de0b6b3a7640000\n        /* \"contracts/2-indepth/7-etherunits.sol\":195:218  1000000000000000000 wei */\n      dup1\n        /* \"contracts/2-indepth/7-etherunits.sol\":195:229  1000000000000000000 wei == 1 ether */\n      eq\n        /* \"contracts/2-indepth/7-etherunits.sol\":188:230  assert(1000000000000000000 wei == 1 ether) */\n      tag_20\n      jumpi\n      tag_21\n      tag_12\n      jump\t// in\n    tag_21:\n    tag_20:\n        /* \"contracts/2-indepth/7-etherunits.sol\":256:257  1 */\n      0x01\n        /* \"contracts/2-indepth/7-etherunits.sol\":247:252  1 wei */\n      dup1\n        /* \"contracts/2-indepth/7-etherunits.sol\":247:257  1 wei == 1 */\n      eq\n        /* \"contracts/2-indepth/7-etherunits.sol\":240:258  assert(1 wei == 1) */\n      tag_22\n      jumpi\n      tag_23\n      tag_12\n      jump\t// in\n    tag_23:\n    tag_22:\n        /* \"contracts/2-indepth/7-etherunits.sol\":286:290  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/2-indepth/7-etherunits.sol\":275:282  1 ether */\n      dup1\n        /* \"contracts/2-indepth/7-etherunits.sol\":275:290  1 ether == 1e18 */\n      eq\n        /* \"contracts/2-indepth/7-etherunits.sol\":268:291  assert(1 ether == 1e18) */\n      tag_24\n      jumpi\n      tag_25\n      tag_12\n      jump\t// in\n    tag_25:\n    tag_24:\n        /* \"contracts/2-indepth/7-etherunits.sol\":415:434  2500000000000000000 */\n      0x22b1c8c1227a0000\n        /* \"contracts/2-indepth/7-etherunits.sol\":402:411  2.5 ether */\n      dup1\n        /* \"contracts/2-indepth/7-etherunits.sol\":402:434  2.5 ether == 2500000000000000000 */\n      eq\n        /* \"contracts/2-indepth/7-etherunits.sol\":395:435  assert(2.5 ether == 2500000000000000000) */\n      tag_26\n      jumpi\n      tag_27\n      tag_12\n      jump\t// in\n    tag_27:\n    tag_26:\n        /* \"contracts/2-indepth/7-etherunits.sol\":98:442  function test() public pure{... */\n      jump\t// out\n        /* \"#utility.yul\":7:187   */\n    tag_12:\n        /* \"#utility.yul\":55:132   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":52:53   */\n      0x00\n        /* \"#utility.yul\":45:133   */\n      mstore\n        /* \"#utility.yul\":152:156   */\n      0x01\n        /* \"#utility.yul\":149:150   */\n      0x04\n        /* \"#utility.yul\":142:157   */\n      mstore\n        /* \"#utility.yul\":176:180   */\n      0x24\n        /* \"#utility.yul\":173:174   */\n      0x00\n        /* \"#utility.yul\":166:181   */\n      revert\n\n    auxdata: 0xa2646970667358221220875eb8fedfcd6dfc45e13f54156169b19e14ca3a64dc7f1656eaff1a85f9cd2364736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b506101558061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063d32cb0fe14610038578063f8a8fd6d14610042575b5f80fd5b61004061004c565b005b61004a610097565b005b603c801461005d5761005c6100f2565b5b610e10801461006f5761006e6100f2565b5b620151808014610082576100816100f2565b5b62093a808014610095576100946100f2565b5b565b670de0b6b3a764000080146100af576100ae6100f2565b5b600180146100c0576100bf6100f2565b5b670de0b6b3a764000080146100d8576100d76100f2565b5b6722b1c8c1227a000080146100f0576100ef6100f2565b5b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea2646970667358221220875eb8fedfcd6dfc45e13f54156169b19e14ca3a64dc7f1656eaff1a85f9cd2364736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x155 DUP1 PUSH2 0x1C PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD32CB0FE EQ PUSH2 0x38 JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH2 0x42 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x40 PUSH2 0x4C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A PUSH2 0x97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3C DUP1 EQ PUSH2 0x5D JUMPI PUSH2 0x5C PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH2 0xE10 DUP1 EQ PUSH2 0x6F JUMPI PUSH2 0x6E PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x82 JUMPI PUSH2 0x81 PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH3 0x93A80 DUP1 EQ PUSH2 0x95 JUMPI PUSH2 0x94 PUSH2 0xF2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xAF JUMPI PUSH2 0xAE PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 EQ PUSH2 0xC0 JUMPI PUSH2 0xBF PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xD8 JUMPI PUSH2 0xD7 PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH8 0x22B1C8C1227A0000 DUP1 EQ PUSH2 0xF0 JUMPI PUSH2 0xEF PUSH2 0xF2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 MCOPY 0xB8 INVALID 0xDF 0xCD PUSH14 0xFC45E13F54156169B19E14CA3A64 0xDC PUSH32 0x1656EAFF1A85F9CD2364736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "68:571:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@exercise_57": {
									"entryPoint": 76,
									"id": 57,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@test_29": {
									"entryPoint": 151,
									"id": 29,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x01": {
									"entryPoint": 242,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:190:1",
										"nodeType": "YulBlock",
										"src": "0:190:1",
										"statements": [
											{
												"body": {
													"nativeSrc": "35:152:1",
													"nodeType": "YulBlock",
													"src": "35:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "52:1:1",
																		"nodeType": "YulLiteral",
																		"src": "52:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "55:77:1",
																		"nodeType": "YulLiteral",
																		"src": "55:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "45:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "45:6:1"
																},
																"nativeSrc": "45:88:1",
																"nodeType": "YulFunctionCall",
																"src": "45:88:1"
															},
															"nativeSrc": "45:88:1",
															"nodeType": "YulExpressionStatement",
															"src": "45:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "149:1:1",
																		"nodeType": "YulLiteral",
																		"src": "149:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "152:4:1",
																		"nodeType": "YulLiteral",
																		"src": "152:4:1",
																		"type": "",
																		"value": "0x01"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "142:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "142:6:1"
																},
																"nativeSrc": "142:15:1",
																"nodeType": "YulFunctionCall",
																"src": "142:15:1"
															},
															"nativeSrc": "142:15:1",
															"nodeType": "YulExpressionStatement",
															"src": "142:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "173:1:1",
																		"nodeType": "YulLiteral",
																		"src": "173:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "176:4:1",
																		"nodeType": "YulLiteral",
																		"src": "176:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "166:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:1"
																},
																"nativeSrc": "166:15:1",
																"nodeType": "YulFunctionCall",
																"src": "166:15:1"
															},
															"nativeSrc": "166:15:1",
															"nodeType": "YulExpressionStatement",
															"src": "166:15:1"
														}
													]
												},
												"name": "panic_error_0x01",
												"nativeSrc": "7:180:1",
												"nodeType": "YulFunctionDefinition",
												"src": "7:180:1"
											}
										]
									},
									"contents": "{\n\n    function panic_error_0x01() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063d32cb0fe14610038578063f8a8fd6d14610042575b5f80fd5b61004061004c565b005b61004a610097565b005b603c801461005d5761005c6100f2565b5b610e10801461006f5761006e6100f2565b5b620151808014610082576100816100f2565b5b62093a808014610095576100946100f2565b5b565b670de0b6b3a764000080146100af576100ae6100f2565b5b600180146100c0576100bf6100f2565b5b670de0b6b3a764000080146100d8576100d76100f2565b5b6722b1c8c1227a000080146100f0576100ef6100f2565b5b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea2646970667358221220875eb8fedfcd6dfc45e13f54156169b19e14ca3a64dc7f1656eaff1a85f9cd2364736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD32CB0FE EQ PUSH2 0x38 JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH2 0x42 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x40 PUSH2 0x4C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A PUSH2 0x97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3C DUP1 EQ PUSH2 0x5D JUMPI PUSH2 0x5C PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH2 0xE10 DUP1 EQ PUSH2 0x6F JUMPI PUSH2 0x6E PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x82 JUMPI PUSH2 0x81 PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH3 0x93A80 DUP1 EQ PUSH2 0x95 JUMPI PUSH2 0x94 PUSH2 0xF2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xAF JUMPI PUSH2 0xAE PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 EQ PUSH2 0xC0 JUMPI PUSH2 0xBF PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xD8 JUMPI PUSH2 0xD7 PUSH2 0xF2 JUMP JUMPDEST JUMPDEST PUSH8 0x22B1C8C1227A0000 DUP1 EQ PUSH2 0xF0 JUMPI PUSH2 0xEF PUSH2 0xF2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 MCOPY 0xB8 INVALID 0xDF 0xCD PUSH14 0xFC45E13F54156169B19E14CA3A64 0xDC PUSH32 0x1656EAFF1A85F9CD2364736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "68:571:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:189;;;:::i;:::-;;98:344;;;:::i;:::-;;448:189;510:9;496:10;:23;489:31;;;;:::i;:::-;;551:7;537:10;:21;530:29;;;;:::i;:::-;;588:6;576:8;:18;569:26;;;;:::i;:::-;;622:7;612:6;:17;605:25;;;;:::i;:::-;;448:189::o;98:344::-;222:7;195:23;:34;188:42;;;;:::i;:::-;;256:1;247:5;:10;240:18;;;;:::i;:::-;;286:4;275:7;:15;268:23;;;;:::i;:::-;;415:19;402:9;:32;395:40;;;;:::i;:::-;;98:344::o;7:180:1:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "68200",
								"executionCost": "115",
								"totalCost": "68315"
							},
							"external": {
								"exercise()": "213",
								"test()": "235"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 68,
									"end": 639,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 68,
									"end": 639,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 68,
									"end": 639,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220875eb8fedfcd6dfc45e13f54156169b19e14ca3a64dc7f1656eaff1a85f9cd2364736f6c634300081a0033",
									".code": [
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "D32CB0FE"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "F8A8FD6D"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 68,
											"end": 639,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 68,
											"end": 639,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 448,
											"end": 637,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 448,
											"end": 637,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 448,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 448,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 448,
											"end": 637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 448,
											"end": 637,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 448,
											"end": 637,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 448,
											"end": 637,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 98,
											"end": 442,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 98,
											"end": 442,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 98,
											"end": 442,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 98,
											"end": 442,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 98,
											"end": 442,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 98,
											"end": 442,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 98,
											"end": 442,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 98,
											"end": 442,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 448,
											"end": 637,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 448,
											"end": 637,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 510,
											"end": 519,
											"name": "PUSH",
											"source": 0,
											"value": "3C"
										},
										{
											"begin": 496,
											"end": 506,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 496,
											"end": 519,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 489,
											"end": 520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 489,
											"end": 520,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 489,
											"end": 520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 489,
											"end": 520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 489,
											"end": 520,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 489,
											"end": 520,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 489,
											"end": 520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 489,
											"end": 520,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 489,
											"end": 520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 551,
											"end": 558,
											"name": "PUSH",
											"source": 0,
											"value": "E10"
										},
										{
											"begin": 537,
											"end": 547,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 537,
											"end": 558,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 530,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 530,
											"end": 559,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 530,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 530,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 530,
											"end": 559,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 530,
											"end": 559,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 530,
											"end": 559,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 530,
											"end": 559,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 530,
											"end": 559,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 588,
											"end": 594,
											"name": "PUSH",
											"source": 0,
											"value": "15180"
										},
										{
											"begin": 576,
											"end": 584,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 576,
											"end": 594,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 569,
											"end": 595,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 569,
											"end": 595,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 569,
											"end": 595,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 569,
											"end": 595,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 569,
											"end": 595,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 569,
											"end": 595,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 569,
											"end": 595,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 569,
											"end": 595,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 569,
											"end": 595,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 622,
											"end": 629,
											"name": "PUSH",
											"source": 0,
											"value": "93A80"
										},
										{
											"begin": 612,
											"end": 618,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 612,
											"end": 629,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 605,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 605,
											"end": 630,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 605,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 605,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 605,
											"end": 630,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 605,
											"end": 630,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 605,
											"end": 630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 605,
											"end": 630,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 605,
											"end": 630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 448,
											"end": 637,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 98,
											"end": 442,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 98,
											"end": 442,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 222,
											"end": 229,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 195,
											"end": 218,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 188,
											"end": 230,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 188,
											"end": 230,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 188,
											"end": 230,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 188,
											"end": 230,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 188,
											"end": 230,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 188,
											"end": 230,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 188,
											"end": 230,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 188,
											"end": 230,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 188,
											"end": 230,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 256,
											"end": 257,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 247,
											"end": 252,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 247,
											"end": 257,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 240,
											"end": 258,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 240,
											"end": 258,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 240,
											"end": 258,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 240,
											"end": 258,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 240,
											"end": 258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 240,
											"end": 258,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 240,
											"end": 258,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 240,
											"end": 258,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 240,
											"end": 258,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 286,
											"end": 290,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 275,
											"end": 282,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 275,
											"end": 290,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 268,
											"end": 291,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 268,
											"end": 291,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 268,
											"end": 291,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 268,
											"end": 291,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 268,
											"end": 291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 268,
											"end": 291,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 268,
											"end": 291,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 268,
											"end": 291,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 268,
											"end": 291,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 415,
											"end": 434,
											"name": "PUSH",
											"source": 0,
											"value": "22B1C8C1227A0000"
										},
										{
											"begin": 402,
											"end": 411,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 402,
											"end": 434,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 395,
											"end": 435,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 395,
											"end": 435,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 395,
											"end": 435,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 395,
											"end": 435,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 395,
											"end": 435,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 395,
											"end": 435,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 395,
											"end": 435,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 395,
											"end": 435,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 395,
											"end": 435,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 98,
											"end": 442,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 187,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 7,
											"end": 187,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 55,
											"end": 132,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 52,
											"end": 53,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 45,
											"end": 133,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 149,
											"end": 150,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 142,
											"end": 157,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 180,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 173,
											"end": 174,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 166,
											"end": 181,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"contracts/2-indepth/7-etherunits.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"exercise()": "d32cb0fe",
							"test()": "f8a8fd6d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/2-indepth/7-etherunits.sol\":\"learnEtherUnits\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/2-indepth/7-etherunits.sol\":{\"keccak256\":\"0x37a62b8eaf56d4f95ec54f0d6b11e22869e4bfca79649bc7eb2f9b766a1f9856\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb96b8286954e34920d099d3bee3f4609b18a61a0313ebc9a1d9fe765bcf62b4\",\"dweb:/ipfs/QmU9cHTaiGoyXRpXphtwieygYZN7t17fdm1tEBpxiUoCPG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/2-indepth/7-etherunits.sol": {
				"ast": {
					"absolutePath": "contracts/2-indepth/7-etherunits.sol",
					"exportedSymbols": {
						"learnEtherUnits": [
							58
						]
					},
					"id": 59,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:33:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "learnEtherUnits",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 58,
							"linearizedBaseContracts": [
								58
							],
							"name": "learnEtherUnits",
							"nameLocation": "77:15:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "125:317:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 7,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31303030303030303030303030303030303030",
																"id": 5,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "195:23:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1000000000000000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 6,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "222:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"src": "195:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 4,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "188:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 8,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "188:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 9,
												"nodeType": "ExpressionStatement",
												"src": "188:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 13,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 11,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "247:5:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 12,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "256:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "247:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 10,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "240:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "240:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 15,
												"nodeType": "ExpressionStatement",
												"src": "240:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "275:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 18,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "286:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "275:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 16,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "268:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "268:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "268:23:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 25,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "322e35",
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "402:9:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2500000000000000000_by_1",
																	"typeString": "int_const 2500000000000000000"
																},
																"value": "2.5"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "32353030303030303030303030303030303030",
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "415:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2500000000000000000_by_1",
																	"typeString": "int_const 2500000000000000000"
																},
																"value": "2500000000000000000"
															},
															"src": "402:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 22,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "395:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "395:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "395:40:0"
											}
										]
									},
									"functionSelector": "f8a8fd6d",
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "test",
									"nameLocation": "107:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "111:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "125:0:0"
									},
									"scope": 58,
									"src": "98:344:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 56,
										"nodeType": "Block",
										"src": "479:158:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3630",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "496:10:0",
																"subdenomination": "seconds",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "60"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 34,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "510:9:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "1"
															},
															"src": "496:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 32,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "489:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "489:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "489:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3630",
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "537:10:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3600_by_1",
																	"typeString": "int_const 3600"
																},
																"value": "60"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 40,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "551:7:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3600_by_1",
																	"typeString": "int_const 3600"
																},
																"value": "1"
															},
															"src": "537:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 38,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "530:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "530:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "530:29:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3234",
																"id": 45,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "576:8:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "24"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "588:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "1"
															},
															"src": "576:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 44,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "569:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "569:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "569:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "37",
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "612:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_604800_by_1",
																	"typeString": "int_const 604800"
																},
																"value": "7"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "622:7:0",
																"subdenomination": "weeks",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_604800_by_1",
																	"typeString": "int_const 604800"
																},
																"value": "1"
															},
															"src": "612:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 50,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "605:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "605:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "605:25:0"
											}
										]
									},
									"functionSelector": "d32cb0fe",
									"id": 57,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "exercise",
									"nameLocation": "457:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "465:2:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "479:0:0"
									},
									"scope": 58,
									"src": "448:189:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 59,
							"src": "68:571:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:606:0"
				},
				"id": 0
			}
		}
	}
}